---
common: &common
  agents:
    - "capable_of_building=gdk-for-unreal"
    - "environment=production"
    - "permission_set=builder"
    - "platform=linux"  # if you need a different platform, configure this: macos|linux|windows.
    - "queue=${CI_LINUX_BUILDER_QUEUE:-v4-2019-12-12-bk5225-daecba805768d787}"
    - "scaler_version=2"
    - "working_hours_time_zone=london"

  timeout_in_minutes: 20
  retry:
    automatic:
        # This is designed to trap and retry failures because agent lost connection. Agent exits with -1 in this case.
      - exit_status: -1
        limit: 3

steps:
  # Stage 0: Tell Buildkite what you want to release.

  # TODO: I've modified gdk-version and added engine-version & preview. I need to call these keys using "buildkite-agent meta-data get" where required.
  - block: Configure your release.
    prompt: Fill out these details for your release.
    fields:
      - text: UnrealGDK component release version
        key: gdk-version
        required: true
        hint: "The name of component release version you want to create `UnrealGDK`, `UnrealGDKExampleProject` and `UnrealGDKTestGyms` release candidates for. All release candidates are branched from master. For example: "0.12.2" or "1.0.1"."

      - text: UnrealEngine source branches
        key: engine-versions
        required: true
        hint: "The Unreal Engine version (or versions) that you want to branch release candidates from. Use commas to seperate engine versions. For example:
          "4.24-SpatialOSUnrealGDK,4.23-SpatialOSUnrealGDK"."
        default: "4.24-SpatialOSUnrealGDK,4.23-SpatialOSUnrealGDK"

  # Stage 1: Prepare the release candidates.

  # There is one prepare step for each repo we release.
  # Prepare steps create a PR and upload metadata but do not release anything.
  - label: Prepare the UnrealGDK release
    command: ci/prepare-release.sh UnrealGDK
    <<: *common # This folds the YAML named anchor into this step. Overrides, if any, should follow, not precede.
    retry:
      manual:
        permit_on_passed: true

  - label: Prepare UnrealGDKExampleProject release
    command: ci/prepare-release.sh UnrealGDKExampleProject
    <<: *common # This folds the YAML named anchor into this step. Overrides, if any, should follow, not precede.
    retry:
      manual:
        permit_on_passed: true

  - label: Prepare UnrealGDKTestGyms release
    command: ci/prepare-release.sh UnrealGDKTestGyms
    <<: *common # This folds the YAML named anchor into this step. Overrides, if any, should follow, not precede.
    retry:
      manual:
        permit_on_passed: true

  # TODO: Re-write prepare-release.sh to work with our Engine branching strategy and multiple engines.
  - label: Prepare UnrealEngine release
    command: ci/prepare-release.sh UnrealEngine
    <<: *common # This folds the YAML named anchor into this step. Overrides, if any, should follow, not precede.
    retry:
      manual:
        permit_on_passed: true

  - wait
  # Stage 2: Run all tests against the release candidates.
  # TODO: Work out what generate-release-qa-trigger.sh does and re-write it to run all tests across all four repos.
  - label: "Add step for triggering release QA"
    command: ci/generate-release-qa-trigger.sh UnrealGDK | buildkite-agent pipeline upload
    <<: *common # This folds the YAML named anchor into this step. Overrides, if any, should follow, not precede.
    retry:
      manual:
        permit_on_passed: true

  # Stage 3: Promote the release candiates to preview and/or relase branches.

  # Block steps require a human to click a button, this is a safety precaution.
  - block: Unblock UnrealGDK release

  # TODO: Re-write release.sh to function across all four repos.
  - label: Release UnrealGDK
    command: ci/release.sh UnrealGDK
    <<: *common # This folds the YAML named anchor into this step. Overrides, if any, should follow, not precede.
